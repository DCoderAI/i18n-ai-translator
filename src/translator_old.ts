import { PromptTemplate } from "@langchain/core/prompts";
import { Ollama } from "@langchain/community/llms/ollama";

const TRANSLATE_TEMPLATE = `
Instructions for Translation:
- You are expert in translation. Translate the following sentence from English to {destLang}
- You should follow {fileFormat} file format.
- You will be directly written to the file.
- You should not worry about the perfect translation.
- For the mdx format, keep the header section keys unchanged and only translate the values. Keys include title, description, image, date, modifiedDate etc
- You should not worry about the perfect translation.
- You should not break the unique words into parts and translate e.g. NextGenAIKit -> Next Gen AI Kit is wrong, it should be NextGenAIKit.
- The translated content will be send to end user without  human intervention. You should not include any line which end user can think that this content is generated by the AI e.g. Here is the translation of the given text from English to or similar kind of messages.
- You should not ask for any feedback and should not include any remarks.
- You should not add any Note or Warning: messages to the translation.
- You should not add any introductory or explanatory messages in the response.
- You should return only translated message without any additional messages generated by you. It could be Note: or Warning: or general message.
- Concentrate solely on providing the translation without additional commentary or messages. Only return translated message without any additional messages.

Original Text:
{text}
`;



const prompt = PromptTemplate.fromTemplate(TRANSLATE_TEMPLATE);


const translate = async (model: Ollama, text: string, destLang: string, fileFormat: string = "text") => {
	try {
		// console.log("File format:", fileFormat)
		const chain = prompt.pipe(model);
		const response = await chain.invoke({
			destLang,
			text,
			fileFormat,
		});
		
		// write a code to remove following lines from the response
		// Here is the translation additional words
		// do it using regular expression and also make it case insensitive,
		// remove the entire line
		
		const regex = /Here is the translation \w+ /gi; // remove the full like
		const results = response.replace(regex, "");
		
		console.log("Response:", results);
		
		// @ts-ignore
		// const translatedText = response?.translated_text ?? response?.type?.translated_text ?? response?.properties?.translated_text?.value ?? response?.properties?.translated_text?.example ?? response?.properties?.translated_text?.enum ?? response?.properties?.translated_text;
		// if (!translatedText) {
		// 	// fallback to the original text
		// 	return text;
		// }
		// if (typeof translatedText === "string") {
		// 	// console.log("Original text:", text)
		// 	// console.log("Translated text:", translatedText);
		// 	return translatedText;
		// }
		// console.log("Translated text:", response);
		// return text;
		return results;
		
	} catch (e) {
		console.error(e);
		return text;
	}
	
	
}

export default translate;