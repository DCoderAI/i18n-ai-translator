import { PromptTemplate } from "@langchain/core/prompts";
import { Ollama } from "@langchain/community/llms/ollama";

const TRANSLATE_TEMPLATE = `
Instructions for Translation:
- Translate the following sentence from English to {destLang}
- Keep the file format {fileFormat} same.
- The translated text will be directly written to the file.
- The translated text should not worry about the perfect translation.
- For the mdx file format, keep the header section keys unchanged and only translate the values. Keys include title, description, image, date, modifiedDate etc
- For the json file format, do not change the keys and only translate the values. Do not remove $$$$$$$ from the keys.
- For the json file format, every key is very important, do not miss any key.
- For the json file format, do not change the case of the keys. Keep the keys in the same case as they are in the text input.
- For the json file format, return the translated content in the JSON format. Make you to send only valid JSON data.
- The translated text should not worry about the perfect translation.
- The translated text should not break the unique words into parts and translate e.g. NextGenAIKit -> Next Gen AI Kit is wrong, it should be NextGenAIKit.
- The translated content will be send to end user without human intervention. You should not include any line which end user can think that this content is generated by the AI e.g. Here is the translation of the given text from English to or similar kind of messages.
- The translated text should not ask for any feedback and should not include any remarks.
- The translated text should not add any Note or Warning: messages to the translation.
- The translated text should not add any introductory or explanatory messages in the response.
- The translated text should return only translated message without any additional messages generated by you. It could be Note: or Warning: or general message.
- The input text is coming as a chunk of text and it will be coming in the same format in the output. Don't add anything apart from the translation to avoid wrong message interpretation.

Original Text:
{text}
`;

const prompt = PromptTemplate.fromTemplate(TRANSLATE_TEMPLATE);

const translate = async (model: Ollama, text: string, destLang: string, fileFormat: string = "text") => {
	try {
		// console.log("File format:", fileFormat)
		const chain = prompt.pipe(model);
		const response = await chain.invoke({
			destLang,
			text,
			fileFormat,
		});

		// console.log("Response:", response)
		return response;

		// const regex1 = /Here is the translation \w.+/gi; // remove the full like
		// const regex2 = /Note: \w.+/gi; // remove the full like
		// const regex3 = /Sure, \w.+/gi; // remove the full like
		// let regex4 = /^.*Translation: \w.+/;
		// return response.replace(regex1, "").replace(regex2, "").replace(regex3, "").replace(regex4, "");

	} catch (e) {
		console.error(e);
		return text;
	}
}


const textTranslator = async (model: Ollama, documents: string[], destLang: string, fileFormat?: string) => {
	const texts = [];
	for (const document of documents) {
		const content = await translate(model, document, destLang, fileFormat);
		// console.log(document)
		// console.log(content)
		texts.push(content);
	}
	return texts?.join("\n\n");
}

export const jsonTextTranslator = async (model: Ollama, documents: string[], destLang: string, fileFormat?: string) => {
	const texts = [];
	for (const document of documents) {
		const content = await translate(model, document, destLang, fileFormat);
		console.log("=====================================")
		console.log(document)
		console.log(content)
		console.log("=====================================")
		texts.push(JSON.parse(content));
	}
	// console.log(JSON.stringify(texts))
	return texts;
}

export default textTranslator;
